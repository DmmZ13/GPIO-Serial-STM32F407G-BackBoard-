
CubeIDE_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c28  08002c28  00003c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c40  08002c40  00004098  2**0
                  CONTENTS
  4 .ARM          00000008  08002c40  08002c40  00003c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c48  08002c48  00004098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00003c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00003c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08002c50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004098  2**0
                  CONTENTS
 10 .bss          00000074  20000098  20000098  00004098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  00004098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008259  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001635  00000000  00000000  0000c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c8  00000000  00000000  0000d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000531  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f481  00000000  00000000  0000e551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008889  00000000  00000000  0002d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf003  00000000  00000000  0003625b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f525e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001acc  00000000  00000000  000f52a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000f6d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c10 	.word	0x08002c10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08002c10 	.word	0x08002c10

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 faa2 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f860 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8f2 	bl	80006bc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80004d8:	f000 f8c6 	bl	8000668 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart6, tx_data, strlen(tx_data), 10); // teste serial
 80004dc:	4824      	ldr	r0, [pc, #144]	@ (8000570 <main+0xa8>)
 80004de:	f7ff fe73 	bl	80001c8 <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	230a      	movs	r3, #10
 80004e8:	4921      	ldr	r1, [pc, #132]	@ (8000570 <main+0xa8>)
 80004ea:	4822      	ldr	r0, [pc, #136]	@ (8000574 <main+0xac>)
 80004ec:	f001 fb5e 	bl	8001bac <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart6, rx_data, 1); //Essa função aciona o rx, permitindo callbacks, define o canal que será recebida pela placa a imagem, a mensagem que será recebida e quantos bits terá a mensagem
 80004f0:	2201      	movs	r2, #1
 80004f2:	4921      	ldr	r1, [pc, #132]	@ (8000578 <main+0xb0>)
 80004f4:	481f      	ldr	r0, [pc, #124]	@ (8000574 <main+0xac>)
 80004f6:	f001 fbe4 	bl	8001cc2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  { // LED VERDE CONTROLADO PELO BOTÃO
	  button_state = HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin);
 80004fa:	2101      	movs	r1, #1
 80004fc:	481f      	ldr	r0, [pc, #124]	@ (800057c <main+0xb4>)
 80004fe:	f000 fe3b 	bl	8001178 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <main+0xb8>)
 8000508:	701a      	strb	r2, [r3, #0]
	  	  if (button_state == GPIO_PIN_SET){
 800050a:	4b1d      	ldr	r3, [pc, #116]	@ (8000580 <main+0xb8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d1f3      	bne.n	80004fa <main+0x32>
	  		  led_state = HAL_GPIO_ReadPin(GPIOD, LED_Pin);
 8000512:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000516:	481b      	ldr	r0, [pc, #108]	@ (8000584 <main+0xbc>)
 8000518:	f000 fe2e 	bl	8001178 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b19      	ldr	r3, [pc, #100]	@ (8000588 <main+0xc0>)
 8000522:	701a      	strb	r2, [r3, #0]
	  		  if (led_state == GPIO_PIN_RESET){
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <main+0xc0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d110      	bne.n	800054e <main+0x86>
	  			  HAL_GPIO_WritePin(GPIOD, LED_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000532:	4814      	ldr	r0, [pc, #80]	@ (8000584 <main+0xbc>)
 8000534:	f000 fe38 	bl	80011a8 <HAL_GPIO_WritePin>
	  			HAL_UART_Transmit(&huart6, msg3, strlen(msg3), 10);
 8000538:	4814      	ldr	r0, [pc, #80]	@ (800058c <main+0xc4>)
 800053a:	f7ff fe45 	bl	80001c8 <strlen>
 800053e:	4603      	mov	r3, r0
 8000540:	b29a      	uxth	r2, r3
 8000542:	230a      	movs	r3, #10
 8000544:	4911      	ldr	r1, [pc, #68]	@ (800058c <main+0xc4>)
 8000546:	480b      	ldr	r0, [pc, #44]	@ (8000574 <main+0xac>)
 8000548:	f001 fb30 	bl	8001bac <HAL_UART_Transmit>
 800054c:	e7d5      	b.n	80004fa <main+0x32>
	  		  }
	  		  else {
	  			  HAL_GPIO_WritePin(GPIOD, LED_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <main+0xbc>)
 8000556:	f000 fe27 	bl	80011a8 <HAL_GPIO_WritePin>
	  			HAL_UART_Transmit(&huart6, msg4, strlen(msg4), 10);
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <main+0xc8>)
 800055c:	f7ff fe34 	bl	80001c8 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	230a      	movs	r3, #10
 8000566:	490a      	ldr	r1, [pc, #40]	@ (8000590 <main+0xc8>)
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <main+0xac>)
 800056a:	f001 fb1f 	bl	8001bac <HAL_UART_Transmit>
	  button_state = HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin);
 800056e:	e7c4      	b.n	80004fa <main+0x32>
 8000570:	20000070 	.word	0x20000070
 8000574:	200000b4 	.word	0x200000b4
 8000578:	20000100 	.word	0x20000100
 800057c:	40020000 	.word	0x40020000
 8000580:	200000fc 	.word	0x200000fc
 8000584:	40020c00 	.word	0x40020c00
 8000588:	200000fd 	.word	0x200000fd
 800058c:	20000038 	.word	0x20000038
 8000590:	20000054 	.word	0x20000054

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fb08 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fdde 	bl	80011dc <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 f901 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f83f 	bl	80016cc <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 f8ea 	bl	800082c <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_USART6_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_USART6_UART_Init+0x4c>)
 80006a0:	f001 fa34 	bl	8001b0c <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f8bf 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000b4 	.word	0x200000b4
 80006b8:	40011400 	.word	0x40011400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a2c      	ldr	r2, [pc, #176]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a25      	ldr	r2, [pc, #148]	@ (800078c <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Pin|LEDserial_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_GPIO_Init+0xd4>)
 800074a:	f000 fd2d 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000756:	2302      	movs	r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_GPIO_Init+0xd8>)
 8000762:	f000 fb6d 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LEDserial_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LEDserial_Pin;
 8000766:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0xd4>)
 8000780:	f000 fb5e 	bl	8000e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020c00 	.word	0x40020c00
 8000794:	40020000 	.word	0x40020000

08000798 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	// algoritmo que quando o calbback é acionado, dependendo do valor recebido o led laranja acende ou apaga
	HAL_UART_Transmit(&huart6, rx_data, strlen(rx_data), 10);
 80007a0:	481d      	ldr	r0, [pc, #116]	@ (8000818 <HAL_UART_RxCpltCallback+0x80>)
 80007a2:	f7ff fd11 	bl	80001c8 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	230a      	movs	r3, #10
 80007ac:	491a      	ldr	r1, [pc, #104]	@ (8000818 <HAL_UART_RxCpltCallback+0x80>)
 80007ae:	481b      	ldr	r0, [pc, #108]	@ (800081c <HAL_UART_RxCpltCallback+0x84>)
 80007b0:	f001 f9fc 	bl	8001bac <HAL_UART_Transmit>
	if (rx_data[0] == '1'){
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_UART_RxCpltCallback+0x80>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b31      	cmp	r3, #49	@ 0x31
 80007ba:	d10f      	bne.n	80007dc <HAL_UART_RxCpltCallback+0x44>
		HAL_GPIO_WritePin(GPIOD, LEDserial_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c2:	4817      	ldr	r0, [pc, #92]	@ (8000820 <HAL_UART_RxCpltCallback+0x88>)
 80007c4:	f000 fcf0 	bl	80011a8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart6, msg1, strlen(msg1), 10);
 80007c8:	4816      	ldr	r0, [pc, #88]	@ (8000824 <HAL_UART_RxCpltCallback+0x8c>)
 80007ca:	f7ff fcfd 	bl	80001c8 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	230a      	movs	r3, #10
 80007d4:	4913      	ldr	r1, [pc, #76]	@ (8000824 <HAL_UART_RxCpltCallback+0x8c>)
 80007d6:	4811      	ldr	r0, [pc, #68]	@ (800081c <HAL_UART_RxCpltCallback+0x84>)
 80007d8:	f001 f9e8 	bl	8001bac <HAL_UART_Transmit>
	}
	if (rx_data[0] == '0'){
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_UART_RxCpltCallback+0x80>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b30      	cmp	r3, #48	@ 0x30
 80007e2:	d10f      	bne.n	8000804 <HAL_UART_RxCpltCallback+0x6c>
		HAL_GPIO_WritePin(GPIOD, LEDserial_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <HAL_UART_RxCpltCallback+0x88>)
 80007ec:	f000 fcdc 	bl	80011a8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart6, msg2, strlen(msg2), 10);
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <HAL_UART_RxCpltCallback+0x90>)
 80007f2:	f7ff fce9 	bl	80001c8 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	230a      	movs	r3, #10
 80007fc:	490a      	ldr	r1, [pc, #40]	@ (8000828 <HAL_UART_RxCpltCallback+0x90>)
 80007fe:	4807      	ldr	r0, [pc, #28]	@ (800081c <HAL_UART_RxCpltCallback+0x84>)
 8000800:	f001 f9d4 	bl	8001bac <HAL_UART_Transmit>
	}
	  HAL_UART_Receive_IT(&huart6, rx_data, 1); //aciona o rx de novo, porque depois do callback ele "para de funcionar"
 8000804:	2201      	movs	r2, #1
 8000806:	4904      	ldr	r1, [pc, #16]	@ (8000818 <HAL_UART_RxCpltCallback+0x80>)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <HAL_UART_RxCpltCallback+0x84>)
 800080a:	f001 fa5a 	bl	8001cc2 <HAL_UART_Receive_IT>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100
 800081c:	200000b4 	.word	0x200000b4
 8000820:	40020c00 	.word	0x40020c00
 8000824:	20000000 	.word	0x20000000
 8000828:	2000001c 	.word	0x2000001c

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	@ (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000876:	2007      	movs	r0, #7
 8000878:	f000 fa0e 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	@ (800091c <HAL_UART_MspInit+0x94>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d133      	bne.n	8000912 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <HAL_UART_MspInit+0x98>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <HAL_UART_MspInit+0x98>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0x98>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_UART_MspInit+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <HAL_UART_MspInit+0x98>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_UART_MspInit+0x98>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e2:	23c0      	movs	r3, #192	@ 0xc0
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80008f2:	2308      	movs	r3, #8
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <HAL_UART_MspInit+0x9c>)
 80008fe:	f000 fa9f 	bl	8000e40 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2047      	movs	r0, #71	@ 0x47
 8000908:	f000 f9d1 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800090c:	2047      	movs	r0, #71	@ 0x47
 800090e:	f000 f9ea 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	@ 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40011400 	.word	0x40011400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020800 	.word	0x40020800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f89b 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <USART6_IRQHandler+0x10>)
 800098e:	f001 f9bd 	bl	8001d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000b4 	.word	0x200000b4

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c4:	f7ff ffea 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f002 f8eb 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fd69 	bl	80004c8 <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000a04:	08002c50 	.word	0x08002c50
  ldr r2, =_sbss
 8000a08:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000a0c:	2000010c 	.word	0x2000010c

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <HAL_Init+0x40>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_Init+0x40>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x40>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f92b 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fef6 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f943 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f90b 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	@ (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	20000090 	.word	0x20000090

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000094 	.word	0x20000094
 8000adc:	20000108 	.word	0x20000108

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000108 	.word	0x20000108

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff feda 	bl	8000ae0 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d008      	beq.n	8000d4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e052      	b.n	8000df2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0216 	bic.w	r2, r2, #22
 8000d5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d103      	bne.n	8000d7c <HAL_DMA_Abort+0x62>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0208 	bic.w	r2, r2, #8
 8000d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d9c:	e013      	b.n	8000dc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d9e:	f7ff fe9f 	bl	8000ae0 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d90c      	bls.n	8000dc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2220      	movs	r2, #32
 8000db0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e015      	b.n	8000df2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e4      	bne.n	8000d9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dd8:	223f      	movs	r2, #63	@ 0x3f
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d004      	beq.n	8000e18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e00c      	b.n	8000e32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e16b      	b.n	8001134 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 815a 	bne.w	800112e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d017      	beq.n	8000f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80b4 	beq.w	800112e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b60      	ldr	r3, [pc, #384]	@ (800114c <HAL_GPIO_Init+0x30c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a5f      	ldr	r2, [pc, #380]	@ (800114c <HAL_GPIO_Init+0x30c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800114c <HAL_GPIO_Init+0x30c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8001150 <HAL_GPIO_Init+0x310>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a52      	ldr	r2, [pc, #328]	@ (8001154 <HAL_GPIO_Init+0x314>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d02b      	beq.n	8001066 <HAL_GPIO_Init+0x226>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a51      	ldr	r2, [pc, #324]	@ (8001158 <HAL_GPIO_Init+0x318>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d025      	beq.n	8001062 <HAL_GPIO_Init+0x222>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a50      	ldr	r2, [pc, #320]	@ (800115c <HAL_GPIO_Init+0x31c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x21e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	@ (8001160 <HAL_GPIO_Init+0x320>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x21a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	@ (8001164 <HAL_GPIO_Init+0x324>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x216>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	@ (8001168 <HAL_GPIO_Init+0x328>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x212>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	@ (800116c <HAL_GPIO_Init+0x32c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	@ (8001170 <HAL_GPIO_Init+0x330>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x20a>
 8001046:	2307      	movs	r3, #7
 8001048:	e00e      	b.n	8001068 <HAL_GPIO_Init+0x228>
 800104a:	2308      	movs	r3, #8
 800104c:	e00c      	b.n	8001068 <HAL_GPIO_Init+0x228>
 800104e:	2306      	movs	r3, #6
 8001050:	e00a      	b.n	8001068 <HAL_GPIO_Init+0x228>
 8001052:	2305      	movs	r3, #5
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x228>
 8001056:	2304      	movs	r3, #4
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x228>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x228>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x228>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x228>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	@ (8001150 <HAL_GPIO_Init+0x310>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <HAL_GPIO_Init+0x334>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010aa:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <HAL_GPIO_Init+0x334>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <HAL_GPIO_Init+0x334>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d4:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <HAL_GPIO_Init+0x334>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <HAL_GPIO_Init+0x334>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <HAL_GPIO_Init+0x334>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_GPIO_Init+0x334>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001128:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <HAL_GPIO_Init+0x334>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f ae90 	bls.w	8000e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	@ 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40021400 	.word	0x40021400
 800116c:	40021800 	.word	0x40021800
 8001170:	40021c00 	.word	0x40021c00
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e001      	b.n	800119a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e267      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011fa:	4b88      	ldr	r3, [pc, #544]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b85      	ldr	r3, [pc, #532]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b82      	ldr	r3, [pc, #520]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b7e      	ldr	r3, [pc, #504]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e242      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b76      	ldr	r3, [pc, #472]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b70      	ldr	r3, [pc, #448]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6f      	ldr	r2, [pc, #444]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b6d      	ldr	r3, [pc, #436]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6c      	ldr	r2, [pc, #432]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b69      	ldr	r3, [pc, #420]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a68      	ldr	r2, [pc, #416]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b66      	ldr	r3, [pc, #408]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fc24 	bl	8000ae0 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fc20 	bl	8000ae0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	@ 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e207      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b5b      	ldr	r3, [pc, #364]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc10 	bl	8000ae0 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fc0c 	bl	8000ae0 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	@ 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1f3      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b51      	ldr	r3, [pc, #324]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012f2:	4b4a      	ldr	r3, [pc, #296]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b47      	ldr	r3, [pc, #284]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b44      	ldr	r3, [pc, #272]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b41      	ldr	r3, [pc, #260]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1c7      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4937      	ldr	r1, [pc, #220]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <HAL_RCC_OscConfig+0x244>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fbc5 	bl	8000ae0 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fbc1 	bl	8000ae0 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e1a8      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4925      	ldr	r1, [pc, #148]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_RCC_OscConfig+0x244>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fba4 	bl	8000ae0 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fba0 	bl	8000ae0 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e187      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d036      	beq.n	8001434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <HAL_RCC_OscConfig+0x248>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fb84 	bl	8000ae0 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fb80 	bl	8000ae0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e167      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_RCC_OscConfig+0x240>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e01b      	b.n	8001434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_OscConfig+0x248>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb6d 	bl	8000ae0 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e00e      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fb69 	bl	8000ae0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d907      	bls.n	8001428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e150      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b88      	ldr	r3, [pc, #544]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 800142a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ea      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8097 	beq.w	8001570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b81      	ldr	r3, [pc, #516]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b7d      	ldr	r3, [pc, #500]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a7c      	ldr	r2, [pc, #496]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b7a      	ldr	r3, [pc, #488]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b77      	ldr	r3, [pc, #476]	@ (8001650 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147e:	4b74      	ldr	r3, [pc, #464]	@ (8001650 <HAL_RCC_OscConfig+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a73      	ldr	r2, [pc, #460]	@ (8001650 <HAL_RCC_OscConfig+0x474>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb29 	bl	8000ae0 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fb25 	bl	8000ae0 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e10c      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <HAL_RCC_OscConfig+0x474>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2ea>
 80014b8:	4b64      	ldr	r3, [pc, #400]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014bc:	4a63      	ldr	r2, [pc, #396]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x30c>
 80014ce:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d2:	4a5e      	ldr	r2, [pc, #376]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014da:	4b5c      	ldr	r3, [pc, #368]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014de:	4a5b      	ldr	r2, [pc, #364]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014e8:	4b58      	ldr	r3, [pc, #352]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ec:	4a57      	ldr	r2, [pc, #348]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f4:	4b55      	ldr	r3, [pc, #340]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f8:	4a54      	ldr	r2, [pc, #336]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d015      	beq.n	8001534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff faea 	bl	8000ae0 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fae6 	bl	8000ae0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0cb      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4b49      	ldr	r3, [pc, #292]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ee      	beq.n	8001510 <HAL_RCC_OscConfig+0x334>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fad4 	bl	8000ae0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fad0 	bl	8000ae0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0b5      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ee      	bne.n	800153c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b39      	ldr	r3, [pc, #228]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a38      	ldr	r2, [pc, #224]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a1 	beq.w	80016bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d05c      	beq.n	8001640 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d141      	bne.n	8001612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff faa4 	bl	8000ae0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff faa0 	bl	8000ae0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e087      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	491b      	ldr	r1, [pc, #108]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x478>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fa79 	bl	8000ae0 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fa75 	bl	8000ae0 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e05c      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x416>
 8001610:	e054      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa62 	bl	8000ae0 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fa5e 	bl	8000ae0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e045      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x444>
 800163e:	e03d      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e038      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000
 8001654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_RCC_OscConfig+0x4ec>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d028      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d121      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d11a      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001688:	4013      	ands	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800168e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001690:	4293      	cmp	r3, r2
 8001692:	d111      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b68      	ldr	r3, [pc, #416]	@ (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d90c      	bls.n	8001708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b65      	ldr	r3, [pc, #404]	@ (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	@ (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d044      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	2b03      	cmp	r3, #3
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4934      	ldr	r1, [pc, #208]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff f990 	bl	8000ae0 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff f98c 	bl	8000ae0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2b      	ldr	r3, [pc, #172]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d20c      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f8f0 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08002c28 	.word	0x08002c28
 8001890:	2000008c 	.word	0x2000008c
 8001894:	20000090 	.word	0x20000090

08001898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800189c:	b094      	sub	sp, #80	@ 0x50
 800189e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b0:	4b79      	ldr	r3, [pc, #484]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d00d      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 80e1 	bhi.w	8001a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ca:	e0db      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b73      	ldr	r3, [pc, #460]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80018ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018d0:	e0db      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d2:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80018d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018d6:	e0d8      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	633b      	str	r3, [r7, #48]	@ 0x30
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	@ 0x34
 8001906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4621      	mov	r1, r4
 8001924:	1a51      	subs	r1, r2, r1
 8001926:	6139      	str	r1, [r7, #16]
 8001928:	4629      	mov	r1, r5
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800193c:	4659      	mov	r1, fp
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	4651      	mov	r1, sl
 8001942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001946:	4651      	mov	r1, sl
 8001948:	018a      	lsls	r2, r1, #6
 800194a:	4651      	mov	r1, sl
 800194c:	ebb2 0801 	subs.w	r8, r2, r1
 8001950:	4659      	mov	r1, fp
 8001952:	eb63 0901 	sbc.w	r9, r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800196a:	4690      	mov	r8, r2
 800196c:	4699      	mov	r9, r3
 800196e:	4623      	mov	r3, r4
 8001970:	eb18 0303 	adds.w	r3, r8, r3
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	462b      	mov	r3, r5
 8001978:	eb49 0303 	adc.w	r3, r9, r3
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800198a:	4629      	mov	r1, r5
 800198c:	024b      	lsls	r3, r1, #9
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001994:	4621      	mov	r1, r4
 8001996:	024a      	lsls	r2, r1, #9
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199e:	2200      	movs	r2, #0
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019a8:	f7fe fc16 	bl	80001d8 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019b4:	e058      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	4611      	mov	r1, r2
 80019c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80019cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d0:	4642      	mov	r2, r8
 80019d2:	464b      	mov	r3, r9
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	0159      	lsls	r1, r3, #5
 80019de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e2:	0150      	lsls	r0, r2, #5
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4641      	mov	r1, r8
 80019ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ee:	4649      	mov	r1, r9
 80019f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a08:	ebb2 040a 	subs.w	r4, r2, sl
 8001a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	00eb      	lsls	r3, r5, #3
 8001a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a1e:	00e2      	lsls	r2, r4, #3
 8001a20:	4614      	mov	r4, r2
 8001a22:	461d      	mov	r5, r3
 8001a24:	4643      	mov	r3, r8
 8001a26:	18e3      	adds	r3, r4, r3
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	eb45 0303 	adc.w	r3, r5, r3
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	028b      	lsls	r3, r1, #10
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a48:	4621      	mov	r1, r4
 8001a4a:	028a      	lsls	r2, r1, #10
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	61fa      	str	r2, [r7, #28]
 8001a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a5c:	f7fe fbbc 	bl	80001d8 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3750      	adds	r7, #80	@ 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	00f42400 	.word	0x00f42400
 8001aa0:	007a1200 	.word	0x007a1200

08001aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000008c 	.word	0x2000008c

08001abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0a9b      	lsrs	r3, r3, #10
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	@ (8001ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08002c38 	.word	0x08002c38

08001ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae8:	f7ff ffdc 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0b5b      	lsrs	r3, r3, #13
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	@ (8001b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08002c38 	.word	0x08002c38

08001b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e042      	b.n	8001ba4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe fea8 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	@ 0x24
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fdbd 	bl	80026d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d175      	bne.n	8001cb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_UART_Transmit+0x2c>
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e06e      	b.n	8001cba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2221      	movs	r2, #33	@ 0x21
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bea:	f7fe ff79 	bl	8000ae0 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c04:	d108      	bne.n	8001c18 <HAL_UART_Transmit+0x6c>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	e003      	b.n	8001c20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c20:	e02e      	b.n	8001c80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 fb1f 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e03a      	b.n	8001cba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10b      	bne.n	8001c62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e007      	b.n	8001c72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1cb      	bne.n	8001c22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2140      	movs	r1, #64	@ 0x40
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 faeb 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e006      	b.n	8001cba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d112      	bne.n	8001d02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_UART_Receive_IT+0x26>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e00b      	b.n	8001d04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fb12 	bl	8002322 <UART_Start_Receive_IT>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	e000      	b.n	8001d04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d02:	2302      	movs	r3, #2
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_UART_IRQHandler+0x66>
 8001d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fbf2 	bl	8002554 <UART_Receive_IT>
      return;
 8001d70:	e25b      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80de 	beq.w	8001f38 <HAL_UART_IRQHandler+0x22c>
 8001d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80d1 	beq.w	8001f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_UART_IRQHandler+0xae>
 8001da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_UART_IRQHandler+0xd2>
 8001dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_UART_IRQHandler+0xf6>
 8001dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f043 0204 	orr.w	r2, r3, #4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d011      	beq.n	8001e32 <HAL_UART_IRQHandler+0x126>
 8001e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f043 0208 	orr.w	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 81f2 	beq.w	8002220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_UART_IRQHandler+0x14e>
 8001e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb7d 	bl	8002554 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_UART_IRQHandler+0x17a>
 8001e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d04f      	beq.n	8001f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa85 	bl	8002396 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	d141      	bne.n	8001f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001ed6:	e841 2300 	strex	r3, r2, [r1]
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d9      	bne.n	8001e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d013      	beq.n	8001f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ec <HAL_UART_IRQHandler+0x3e0>)
 8001ef4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff7d 	bl	8000dfa <HAL_DMA_Abort_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f10:	4610      	mov	r0, r2
 8001f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f14:	e00e      	b.n	8001f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f994 	bl	8002244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	e00a      	b.n	8001f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f990 	bl	8002244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	e006      	b.n	8001f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f98c 	bl	8002244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f32:	e175      	b.n	8002220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	bf00      	nop
    return;
 8001f36:	e173      	b.n	8002220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	f040 814f 	bne.w	80021e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8148 	beq.w	80021e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8141 	beq.w	80021e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7e:	2b40      	cmp	r3, #64	@ 0x40
 8001f80:	f040 80b6 	bne.w	80020f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8145 	beq.w	8002224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f080 813e 	bcs.w	8002224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fba:	f000 8088 	beq.w	80020ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fcc:	e853 3f00 	ldrex	r3, [r3]
 8001fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ffa:	e841 2300 	strex	r3, r2, [r1]
 8001ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1d9      	bne.n	8001fbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800201a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3314      	adds	r3, #20
 800202a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800202e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002032:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002034:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002036:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800203a:	e841 2300 	strex	r3, r2, [r1]
 800203e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e1      	bne.n	800200a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3314      	adds	r3, #20
 800204c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800205c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3314      	adds	r3, #20
 8002066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800206a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800206c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002070:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002072:	e841 2300 	strex	r3, r2, [r1]
 8002076:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1e3      	bne.n	8002046 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	330c      	adds	r3, #12
 8002092:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002096:	e853 3f00 	ldrex	r3, [r3]
 800209a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800209c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800209e:	f023 0310 	bic.w	r3, r3, #16
 80020a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	330c      	adds	r3, #12
 80020ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80020b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b8:	e841 2300 	strex	r3, r2, [r1]
 80020bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80020be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e3      	bne.n	800208c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe26 	bl	8000d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8b7 	bl	8002258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020ea:	e09b      	b.n	8002224 <HAL_UART_IRQHandler+0x518>
 80020ec:	0800245d 	.word	0x0800245d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808e 	beq.w	8002228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800210c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8089 	beq.w	8002228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800212c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800213a:	647a      	str	r2, [r7, #68]	@ 0x44
 800213c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	623b      	str	r3, [r7, #32]
   return(result);
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002172:	633a      	str	r2, [r7, #48]	@ 0x30
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e3      	bne.n	800214e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	e853 3f00 	ldrex	r3, [r3]
 80021a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0310 	bic.w	r3, r3, #16
 80021aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	617b      	str	r3, [r7, #20]
   return(result);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e3      	bne.n	8002194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f83d 	bl	8002258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021de:	e023      	b.n	8002228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_UART_IRQHandler+0x4f4>
 80021ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f943 	bl	8002484 <UART_Transmit_IT>
    return;
 80021fe:	e014      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <HAL_UART_IRQHandler+0x51e>
 800220c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f983 	bl	8002524 <UART_EndTransmit_IT>
    return;
 800221e:	e004      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
    return;
 8002220:	bf00      	nop
 8002222:	e002      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
      return;
 8002224:	bf00      	nop
 8002226:	e000      	b.n	800222a <HAL_UART_IRQHandler+0x51e>
      return;
 8002228:	bf00      	nop
  }
}
 800222a:	37e8      	adds	r7, #232	@ 0xe8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002280:	e03b      	b.n	80022fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d037      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228a:	f7fe fc29 	bl	8000ae0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	6a3a      	ldr	r2, [r7, #32]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e03a      	b.n	800231a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d023      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b80      	cmp	r3, #128	@ 0x80
 80022b6:	d020      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b40      	cmp	r3, #64	@ 0x40
 80022bc:	d01d      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d116      	bne.n	80022fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f857 	bl	8002396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2208      	movs	r2, #8
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4013      	ands	r3, r2
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	429a      	cmp	r2, r3
 8002316:	d0b4      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	4613      	mov	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2222      	movs	r2, #34	@ 0x22
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002366:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0220 	orr.w	r2, r2, #32
 8002386:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002396:	b480      	push	{r7}
 8002398:	b095      	sub	sp, #84	@ 0x54
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a8:	e853 3f00 	ldrex	r3, [r3]
 80023ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023be:	643a      	str	r2, [r7, #64]	@ 0x40
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023c6:	e841 2300 	strex	r3, r2, [r1]
 80023ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e5      	bne.n	800239e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3314      	adds	r3, #20
 80023d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	2b01      	cmp	r3, #1
 800240c:	d119      	bne.n	8002442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	60bb      	str	r3, [r7, #8]
   return(result);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 0310 	bic.w	r3, r3, #16
 8002424:	647b      	str	r3, [r7, #68]	@ 0x44
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800242e:	61ba      	str	r2, [r7, #24]
 8002430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002432:	6979      	ldr	r1, [r7, #20]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	613b      	str	r3, [r7, #16]
   return(result);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e5      	bne.n	800240e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002450:	bf00      	nop
 8002452:	3754      	adds	r7, #84	@ 0x54
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff fee4 	bl	8002244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b21      	cmp	r3, #33	@ 0x21
 8002496:	d13e      	bne.n	8002516 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a0:	d114      	bne.n	80024cc <UART_Transmit_IT+0x48>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d110      	bne.n	80024cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]
 80024ca:	e008      	b.n	80024de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6211      	str	r1, [r2, #32]
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4619      	mov	r1, r3
 80024ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002500:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002510:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800253a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fe73 	bl	8002230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	@ 0x30
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b22      	cmp	r3, #34	@ 0x22
 8002566:	f040 80ae 	bne.w	80026c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002572:	d117      	bne.n	80025a4 <UART_Receive_IT+0x50>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d113      	bne.n	80025a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	b29a      	uxth	r2, r3
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80025a2:	e026      	b.n	80025f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b6:	d007      	beq.n	80025c8 <UART_Receive_IT+0x74>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <UART_Receive_IT+0x82>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d106      	bne.n	80025d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e008      	b.n	80025e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4619      	mov	r1, r3
 8002600:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15d      	bne.n	80026c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0220 	bic.w	r2, r2, #32
 8002614:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	2b01      	cmp	r3, #1
 800264a:	d135      	bne.n	80026b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	613b      	str	r3, [r7, #16]
   return(result);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f023 0310 	bic.w	r3, r3, #16
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002672:	623a      	str	r2, [r7, #32]
 8002674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	69f9      	ldr	r1, [r7, #28]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d10a      	bne.n	80026aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fdd1 	bl	8002258 <HAL_UARTEx_RxEventCallback>
 80026b6:	e002      	b.n	80026be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fe f86d 	bl	8000798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e002      	b.n	80026c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3730      	adds	r7, #48	@ 0x30
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b0c0      	sub	sp, #256	@ 0x100
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	ea40 0301 	orr.w	r3, r0, r1
 80026f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	431a      	orrs	r2, r3
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002728:	f021 010c 	bic.w	r1, r1, #12
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002736:	430b      	orrs	r3, r1
 8002738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274a:	6999      	ldr	r1, [r3, #24]
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	ea40 0301 	orr.w	r3, r0, r1
 8002756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8f      	ldr	r3, [pc, #572]	@ (800299c <UART_SetConfig+0x2cc>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0xa0>
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b8d      	ldr	r3, [pc, #564]	@ (80029a0 <UART_SetConfig+0x2d0>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d104      	bne.n	800277a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002770:	f7ff f9b8 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8002774:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002778:	e003      	b.n	8002782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800277a:	f7ff f99f 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 800277e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800278c:	f040 810c 	bne.w	80029a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800279a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800279e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	1891      	adds	r1, r2, r2
 80027a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027aa:	415b      	adcs	r3, r3
 80027ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027b2:	4621      	mov	r1, r4
 80027b4:	eb12 0801 	adds.w	r8, r2, r1
 80027b8:	4629      	mov	r1, r5
 80027ba:	eb43 0901 	adc.w	r9, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d2:	4690      	mov	r8, r2
 80027d4:	4699      	mov	r9, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb18 0303 	adds.w	r3, r8, r3
 80027dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027e0:	462b      	mov	r3, r5
 80027e2:	eb49 0303 	adc.w	r3, r9, r3
 80027e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027fe:	460b      	mov	r3, r1
 8002800:	18db      	adds	r3, r3, r3
 8002802:	653b      	str	r3, [r7, #80]	@ 0x50
 8002804:	4613      	mov	r3, r2
 8002806:	eb42 0303 	adc.w	r3, r2, r3
 800280a:	657b      	str	r3, [r7, #84]	@ 0x54
 800280c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002814:	f7fd fce0 	bl	80001d8 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <UART_SetConfig+0x2d4>)
 800281e:	fba3 2302 	umull	r2, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	011c      	lsls	r4, r3, #4
 8002826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002830:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002838:	4642      	mov	r2, r8
 800283a:	464b      	mov	r3, r9
 800283c:	1891      	adds	r1, r2, r2
 800283e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002840:	415b      	adcs	r3, r3
 8002842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002848:	4641      	mov	r1, r8
 800284a:	eb12 0a01 	adds.w	sl, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb43 0b01 	adc.w	fp, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002868:	4692      	mov	sl, r2
 800286a:	469b      	mov	fp, r3
 800286c:	4643      	mov	r3, r8
 800286e:	eb1a 0303 	adds.w	r3, sl, r3
 8002872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002876:	464b      	mov	r3, r9
 8002878:	eb4b 0303 	adc.w	r3, fp, r3
 800287c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800288c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002894:	460b      	mov	r3, r1
 8002896:	18db      	adds	r3, r3, r3
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
 800289a:	4613      	mov	r3, r2
 800289c:	eb42 0303 	adc.w	r3, r2, r3
 80028a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028aa:	f7fd fc95 	bl	80001d8 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <UART_SetConfig+0x2d4>)
 80028b6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2264      	movs	r2, #100	@ 0x64
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	1acb      	subs	r3, r1, r3
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028ca:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <UART_SetConfig+0x2d4>)
 80028cc:	fba3 2302 	umull	r2, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028d8:	441c      	add	r4, r3
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028f4:	415b      	adcs	r3, r3
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028fc:	4641      	mov	r1, r8
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	6339      	str	r1, [r7, #48]	@ 0x30
 8002902:	4649      	mov	r1, r9
 8002904:	414b      	adcs	r3, r1
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002914:	4659      	mov	r1, fp
 8002916:	00cb      	lsls	r3, r1, #3
 8002918:	4651      	mov	r1, sl
 800291a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800291e:	4651      	mov	r1, sl
 8002920:	00ca      	lsls	r2, r1, #3
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	4603      	mov	r3, r0
 8002928:	4642      	mov	r2, r8
 800292a:	189b      	adds	r3, r3, r2
 800292c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002930:	464b      	mov	r3, r9
 8002932:	460a      	mov	r2, r1
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800294c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002950:	460b      	mov	r3, r1
 8002952:	18db      	adds	r3, r3, r3
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002956:	4613      	mov	r3, r2
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800295e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002966:	f7fd fc37 	bl	80001d8 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <UART_SetConfig+0x2d4>)
 8002970:	fba3 1302 	umull	r1, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	2164      	movs	r1, #100	@ 0x64
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	3332      	adds	r3, #50	@ 0x32
 8002982:	4a08      	ldr	r2, [pc, #32]	@ (80029a4 <UART_SetConfig+0x2d4>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	f003 0207 	and.w	r2, r3, #7
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4422      	add	r2, r4
 8002996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002998:	e106      	b.n	8002ba8 <UART_SetConfig+0x4d8>
 800299a:	bf00      	nop
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029ba:	4642      	mov	r2, r8
 80029bc:	464b      	mov	r3, r9
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	6239      	str	r1, [r7, #32]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ca:	4641      	mov	r1, r8
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb43 0501 	adc.w	r5, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029f0:	464b      	mov	r3, r9
 80029f2:	eb45 0303 	adc.w	r3, r5, r3
 80029f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a16:	4629      	mov	r1, r5
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a20:	4621      	mov	r1, r4
 8002a22:	008a      	lsls	r2, r1, #2
 8002a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a28:	f7fd fbd6 	bl	80001d8 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b60      	ldr	r3, [pc, #384]	@ (8002bb4 <UART_SetConfig+0x4e4>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	011c      	lsls	r4, r3, #4
 8002a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	61b9      	str	r1, [r7, #24]
 8002a54:	415b      	adcs	r3, r3
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	1851      	adds	r1, r2, r1
 8002a60:	6139      	str	r1, [r7, #16]
 8002a62:	4649      	mov	r1, r9
 8002a64:	414b      	adcs	r3, r1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a74:	4659      	mov	r1, fp
 8002a76:	00cb      	lsls	r3, r1, #3
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7e:	4651      	mov	r1, sl
 8002a80:	00ca      	lsls	r2, r1, #3
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	008b      	lsls	r3, r1, #2
 8002ab8:	4641      	mov	r1, r8
 8002aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abe:	4641      	mov	r1, r8
 8002ac0:	008a      	lsls	r2, r1, #2
 8002ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ac6:	f7fd fb87 	bl	80001d8 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <UART_SetConfig+0x4e4>)
 8002ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2264      	movs	r2, #100	@ 0x64
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	1acb      	subs	r3, r1, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	@ 0x32
 8002ae4:	4a33      	ldr	r2, [pc, #204]	@ (8002bb4 <UART_SetConfig+0x4e4>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af0:	441c      	add	r4, r3
 8002af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002afa:	677a      	str	r2, [r7, #116]	@ 0x74
 8002afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b42:	464b      	mov	r3, r9
 8002b44:	460a      	mov	r2, r1
 8002b46:	eb42 0303 	adc.w	r3, r2, r3
 8002b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b56:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b64:	4649      	mov	r1, r9
 8002b66:	008b      	lsls	r3, r1, #2
 8002b68:	4641      	mov	r1, r8
 8002b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6e:	4641      	mov	r1, r8
 8002b70:	008a      	lsls	r2, r1, #2
 8002b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b76:	f7fd fb2f 	bl	80001d8 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <UART_SetConfig+0x4e4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	@ 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	3332      	adds	r3, #50	@ 0x32
 8002b92:	4a08      	ldr	r2, [pc, #32]	@ (8002bb4 <UART_SetConfig+0x4e4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb4:	51eb851f 	.word	0x51eb851f

08002bb8 <memset>:
 8002bb8:	4402      	add	r2, r0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	@ (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	@ (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 f818 	bl	8002c10 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002c48 	.word	0x08002c48
 8002c04:	08002c48 	.word	0x08002c48
 8002c08:	08002c48 	.word	0x08002c48
 8002c0c:	08002c4c 	.word	0x08002c4c

08002c10 <_init>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr

08002c1c <_fini>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr
